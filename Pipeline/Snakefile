"""

Pipeline to process small non-coding RNA species from small RNA NGS using NextFlex library preperation.

"""

import pandas as pd
import sys

# Read Sample_file.tsv
sample_sheet = pd.read_table("../Config/Sample_file.tsv")

# Check for duplicate sample names, terminate if true
if sample_sheet["Sample_name"].duplicated().any() == True:
    sys.exit("You have duplicate sample names in Sample_file.tsv")

# Check for empty sample_names
if sample_sheet["Sample_name"].isnull().any() == True:
    sys.exit("You have empty sample names in Sample_file.tsv")

# Add sample names to index
sample_sheet = sample_sheet.set_index("Sample_name", drop=False)
sample_names = list(sample_sheet["Sample_name"])

# Rule to specify final output files
rule all:
    input:
        Final_file = "Final_outputs/raw_miRNA_counts_merged_miRDeep2.csv",
        Final_file_2 = "Final_outputs/Summary_plots.pdf"


# Remove adaptors using cutadapt
rule remove_adaptors:
    input:
        lambda wildcards: "Data/" + sample_sheet.loc[wildcards.sample, "File_name"]
    output:
        "Adaptor_removed/{sample}_cleaned.fastq"
    log:
        out = "Adaptor_removed/Log/{sample}.stdout",
        err = "Adaptor_removed/Log/{sample}.stderr"
    params:
        library_type = lambda wildcards: sample_sheet.loc[wildcards.sample, "Library_type"]
    run:
        if params.library_type == "truseq":
            shell("cutadapt -a TGGAATTCTCGGGTGCCAAGG -o {output} --minimum-length 15 {input} > {log.out} 2> {log.err}")
        if params.library_type == "nextflex":
            shell("cutadapt -a TGGAATTCTCGGGTGCCAAGG -o {output} --minimum-length 23 {input} > {log.out} 2> {log.err}")
        

# Trim reads based on NextFlex kit.
# Note: I have to put a condition here depending on library preperation method.
rule trim_read:
    input:
        "Adaptor_removed/{sample}_cleaned.fastq"
    output:
        "Trimmed_reads/{sample}_trimmed.fastq"
    log:
        out = "Trimmed_reads/Log/{sample}.stdout",
        err = "Trimmed_reads/Log/{sample}.stderr"
    params:
        library_type = lambda wildcards: sample_sheet.loc[wildcards.sample, "Library_type"]
    run:
        if params.library_type == "truseq":
            shell("mkdir -p Trimmed_reads/ && cp {input} {output} > {log.out} 2> {log.err}")
        if params.library_type == "nextflex":
            shell("cutadapt -u 4 -u -4 -o {output} {input} > {log.out} 2> {log.err}")


# Annotate reads using unitas.
rule annotate_read:
    input:
        expand("Trimmed_reads/{sample}_trimmed.fastq", sample = sample_names)
    output:
        "Unitas_annotated_reads/Log/Done.txt"
    log:
        out = "Unitas_annotated_reads/Log/Unitas.stdout",
        err = "Unitas_annotated_reads/Log/Unitas.stderr"
    threads: 1
    shell:
        "perlbrew exec --with perl-5.34.0 unitas_1.7.0.pl -input Trimmed_reads/ -species homo_sapiens -threads {threads} > {log.out} 2> {log.err} && touch {output}"


# Move unitas generated folders into pipeline folders        
rule move_folders_unitas:
    input:
        "Unitas_annotated_reads/Log/Done.txt"
    output:
        "Unitas_annotated_reads/Log/Done_2.txt"
    shell:
        "find -maxdepth 1 -type d -name '*fastq_*' -exec mv -t Unitas_annotated_reads/ {{}} + && touch {output}"


# Map trimmed reads to genome using miRDeep2
# Note: Have to use a switch here for mouse genomes.
rule miRDeep2_map:
    input:
        "Trimmed_reads/{sample}_trimmed.fastq"
    output:
        collapsed_fa = "miRDeep2_output/{sample}_miRDeep2_collapsed.fa",
        alligned_arf = "miRDeep2_output/{sample}_miRDeep2_alligned.arf"
    log:
        out = "miRDeep2_output/Log_mapped/{sample}.stdout",
        err = "miRDeep2_output/Log_mapped/{sample}.stderr"
    shell:
        "mapper.pl {input} -e -h -l 16 -m -p 'Required_files/hg38/GCA_000001405.15_GRCh38_no_alt_analysis_set' -q -s {output.collapsed_fa} -t {output.alligned_arf} > {log.out} 2> {log.err}"


# Quantify reads mapped by miRDeep2 
rule miRDeep2_quantify:
    input:
        "miRDeep2_output/{sample}_miRDeep2_collapsed.fa"
    output:
        "expression_analyses/expression_analyses_{sample}/miRBase.mrd"
    log:
        out = "miRDeep2_output/Log_quantified/{sample}.stdout",
        err = "miRDeep2_output/Log_quantified/{sample}.stderr"
    shell:
        "quantifier.pl -m 'Required_files/hg38_miRBase/mature_hsa.fa' -p 'Required_files/hg38_miRBase/hairpin_hsa.fa' -d -t hsa -y {wildcards.sample} -r {input} > {log.out} 2> {log.err}"
        

# Move miRDeep2 generated folders into pipeline folders
rule move_folders_miRDeep2:
    input:
        expand("expression_analyses/expression_analyses_{sample}/miRBase.mrd", sample = sample_names)
    output:
        "miRDeep2_output/expression_analyses/Done.txt"
    shell:
        "find -maxdepth 1 \( -name '*.html' -o -name '*.csv' -o -name '*.log' -o -type d -name 'expression_analyses' \) -exec mv -t miRDeep2_output/ {{}} + && touch {output}"

        
# Combine miRDeep2 output
rule combine_miRDeep2_output:
    input:
        "miRDeep2_output/expression_analyses/Done.txt",
    output:
        "Final_outputs/raw_miRNA_counts_merged_miRDeep2.csv"
    params:
        input_dir = "miRDeep2_output/"
    script:
        "Scripts/Parse_miRDeep2.py"

        
# Combine Unitas output
rule combine_unitas_output:
    input:
        "Unitas_annotated_reads/Log/Done_2.txt",
    output:
        "Final_outputs/Unitas_annotation_summary_combined.csv",
        "Final_outputs/Unitas_hits_per_target_combined.csv",
        "Final_outputs/Unitas_tRF_table_simplified_combined.csv",
        "Final_outputs/Unitas_tRF_table_absolute_combined.csv",
        "Final_outputs/Unitas_tRF_table_fractionated_combined.csv"
    params:
        input_dir = "Unitas_annotated_reads/"
    script:
        "Scripts/Parse_unitas.py"
        
# Combine plot summary graphs
rule plot_summary_graphs:
    input:
        "Final_outputs/Unitas_annotation_summary_combined.csv",
    output:
        "Final_outputs/Summary_plots.pdf",
    script:
        "Scripts/Unitas_output_graph.R"