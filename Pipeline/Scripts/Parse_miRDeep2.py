"""

Parse miRDeep2 outputs to combine all samples into one file.

"""

import glob
import pandas as pd
import os
from functools import reduce

# Combined miRDeep2 csv count outputs.

def parse_miRDeep2(out_path, myparam):
    
    # Read in file to sort paths based on sample layout.
    Sample_file = pd.read_table("../Config/Sample_file.tsv")

    # Find paths of miRDeep2 output files
    miRDeep2_count_files = glob.glob(myparam + "miRNAs_expressed_all_samples*", recursive=True)
        
    # This extracts the filename from the folder name generated by Unitas
    File_names = []

    for temp in miRDeep2_count_files:
        temp_2 = os.path.basename(temp).split("_", 4)[4].rsplit(".", 1)[0]
        File_names.append(temp_2)
            
    # Retrieve indices for ordering paths. Ordering is based on the Sample file supplied by the user.
    Sample_sheet_names = list(Sample_file.loc[::,"Sample_name"])
    indices = [File_names.index(i) for i in Sample_sheet_names]
        
    # Rearrange paths based on ordered indices.
    miRDeep2_count_files = list(map(miRDeep2_count_files.__getitem__, indices))

    # Combind miRDeep2 outputs using paths.
    data = []
        
    for csv in miRDeep2_count_files:
        frame = pd.read_csv(csv, sep = "\t", usecols=["#miRNA", "total"])
        
        # This extracts the filename from the folder name generated by Unitas and renames counts column
        file_name = os.path.basename(csv).split("_", 4)[4].rsplit(".", 1)[0]
        
        # Collapse identical rows and use max value because mature miRNA can map to multiple precursor.
        # See: https://www.biostars.org/p/280879/
        frame = frame.rename(columns = {"#miRNA": "miRNAs", "total": "Raw_counts_" + file_name})
        frame = frame.groupby(["miRNAs"], as_index=False).max()
        data.append(frame)
        
    df_merged = reduce(lambda  left,right: pd.merge(left,right,on=["miRNAs"], how="outer"), data)
    df_merged.to_csv(out_path[0], index = False, na_rep = "NA")

parse_miRDeep2(snakemake.output, snakemake.params["input_dir"])