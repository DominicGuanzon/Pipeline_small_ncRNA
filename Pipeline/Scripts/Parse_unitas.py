"""

Parse Unitas outputs to combine all samples into one file.


"""

import glob
import pandas as pd
import os
from functools import reduce
import matplotlib.pyplot as plt

# Find paths for files needing to be parsed.
data_path = "Unitas_annotated_reads/"
Annotation_summary_paths = glob.glob("**/unitas.annotation_summary.txt", recursive=True)
Hit_target_paths = glob.glob("**/unitas.hits_per_target.txt", recursive=True)
TRF_simplified_paths = glob.glob("**/unitas.tRF-table.simplified.txt", recursive=True)
TRF_table_paths = glob.glob("**/unitas.tRF-table.txt", recursive=True)
Full_annotation_paths = glob.glob("**/unitas.full_annotation_matrix.txt", recursive=True)

data = []

for csv in Annotation_summary_paths:
    frame = pd.read_csv(csv, sep = "\t", names=["RNA_species", "Counts"])
    print(csv)
    
    # Read in counts file. Have to find location of column "reads" first before usecols.
    # Error produced when engine not used. For index_col there is an issue where if rows of later lines is greater than (first line which has more rows than header).
    full_annotation_temp = [s for s in Full_annotation_paths if os.path.dirname(csv) in s]
    full_annotation_temp = pd.read_csv(full_annotation_temp[0], sep = "\t", engine="python", index_col=False, names = ["Temp_1", "Temp_2", "Temp_3"])
    
    # Rename heading and remove first row containing headings. Convert reads to numeric.
    df_names = list(full_annotation_temp.iloc[0,::])
    full_annotation_temp.rename(columns={"Temp_1": df_names[0], "Temp_2": df_names[1], "Temp_3": df_names[2]}, inplace=True)
    full_annotation_temp = full_annotation_temp.drop([0])
    full_annotation_temp["reads"] = pd.to_numeric(full_annotation_temp["reads"])
    
    # This extracts the filename from the folder name generated by Unitas and renames counts column
    file_name = os.path.basename(os.path.dirname(csv).split("_", 2)[2]).rsplit("_", 1)[0].split("_", 2)[2].rsplit(".", 1)[0]
    frame = frame.rename(columns = {"Counts": "Raw_counts_" + file_name})
    
    # Calculate percentage of each species.
    percentage_species = frame["Raw_counts_" + file_name] / full_annotation_temp["reads"].sum() * 100
    frame["Percentages_" + file_name] = percentage_species
    
    # Add row with total count details
    new_row = pd.DataFrame([{"RNA_species": "Total_counts", ("Raw_counts_" + file_name): full_annotation_temp["reads"].sum(), ("Percentages_" + file_name): 100}])
    frame = pd.concat([frame, new_row], ignore_index=True)
    
    # Find index of genomic_tRNA and mitochondrial tRNA
    genomic_tRNA = frame.RNA_species[frame.RNA_species.str.contains("genomic_tRNA")].index
    mitochondrial_tRNA = frame.RNA_species[frame.RNA_species.str.contains("Mt_tRNA")].index
    
    # Extract N + positions and add prefix to make unique.
    if len(genomic_tRNA) > 0:
        range_mod = range(genomic_tRNA[0] + 1, genomic_tRNA[0] + 9)
        tag_name = frame["RNA_species"].iloc[range_mod].tolist()
        tag_name = [s + "_gtRNA" for s in tag_name]
        frame.loc[range_mod, "RNA_species"] = tag_name
    
    if len(mitochondrial_tRNA) > 0:
        range_mod = range(mitochondrial_tRNA[0] + 1, mitochondrial_tRNA[0] + 9)
        tag_name = frame["RNA_species"].iloc[range_mod].tolist()
        tag_name = [s + "_mtRNA" for s in tag_name]
        frame.loc[range_mod, "RNA_species"] = tag_name
    
    data.append(frame)

df_merged = reduce(lambda  left,right: pd.merge(left,right,on=["RNA_species"], how="outer"), data)
df_merged.to_csv("Test.csv", index = False, na_rep = "NA")

data_for_graph = df_merged.filter(regex="Percentages")





def do_something(data_path, out_path):